<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us,ko-KR"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-us,ko-KR" /><updated>2022-11-28T23:17:41+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Chiptune93</title><subtitle>Java Developer&apos;s Tech Blog &amp; Exp Storage.
</subtitle><author><name>Donkyu Lim</name><email>eoen012@gmail.com</email></author><entry><title type="html">Git - Pull Request(PR)</title><link href="http://localhost:4000/git/git-pull-request/" rel="alternate" type="text/html" title="Git - Pull Request(PR)" /><published>2022-11-24T00:00:00+09:00</published><updated>2022-11-24T00:00:00+09:00</updated><id>http://localhost:4000/git/git-pull-request</id><content type="html" xml:base="http://localhost:4000/git/git-pull-request/">&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-fork와-pull-request&quot; id=&quot;markdown-toc-1-fork와-pull-request&quot;&gt;1. Fork와 Pull Request&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-pr&quot; id=&quot;markdown-toc-2-pr&quot;&gt;2. PR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-pr-실습&quot; id=&quot;markdown-toc-3-pr-실습&quot;&gt;3. PR 실습&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-특정-원본-저장소를-fork&quot; id=&quot;markdown-toc-31-특정-원본-저장소를-fork&quot;&gt;3.1. 특정 원본 저장소를 Fork&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#32-fork-한-저장소를-로컬에-clone&quot; id=&quot;markdown-toc-32-fork-한-저장소를-로컬에-clone&quot;&gt;3.2. Fork 한 저장소를 로컬에 Clone&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#32-브랜치-생성-후-작업하기&quot; id=&quot;markdown-toc-32-브랜치-생성-후-작업하기&quot;&gt;3.2. 브랜치 생성 후 작업하기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#33-작업-후-pr-하기&quot; id=&quot;markdown-toc-33-작업-후-pr-하기&quot;&gt;3.3. 작업 후, PR 하기.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고 : &lt;a href=&quot;https://backlog.com/git-tutorial/kr/&quot;&gt;Git 입문&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-fork와-pull-request&quot;&gt;1. Fork와 Pull Request&lt;/h1&gt;

&lt;p&gt;다른 사람의 프로젝트에 참여해 기여자로써 공헌 또는 프로젝트를 수정하고 싶다면
해당 레파지토리를 수정할 수 있는 권한을 가져야 한다.
하지만 모두가 권한을 가질 수 없고, 마음대로 수정할 수 있어서도 안된다.&lt;/p&gt;

&lt;p&gt;이 때, 사용하는 것이 ‘Fork’ 이다.&lt;/p&gt;

&lt;p&gt;포크는 다른 사람의 저장소에 있는 레파지토리를 내 원격저장소에 가져오는 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Fork&lt;/p&gt;

    &lt;p&gt;특정 레파지토리를 내 원격저장소로 복사&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clone&lt;/p&gt;

    &lt;p&gt;특정 레파지토리를 내 로컬저장소에 복사&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr1.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 가져온 소스코드를 수정하여 커밋을 하면 내 저장소에만 반영이 될 뿐 
원래 저장소에는 영향을 끼칠 수 없다.&lt;/p&gt;

&lt;p&gt;이 때, 사용하는 것이 ‘Pull Request(PR)’ 이다.&lt;/p&gt;

&lt;p&gt;변경점 또는 수정이 된 브랜치를 원래 레파지토리에 반영을 하기 위해(= 메인 브랜치에 반영하기 위해)
원래 레파지토리 권한을 가진 사람에게 PR을 보낸다. 그러면 권한이 있는 사람이 해당 PR을 보고(= 리뷰를 하고)
승인을 하면 메인 브랜치에 반영이 되는 식으로 기여가 가능하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fork 없이 Pull Request 하는 방법? &lt;br /&gt; &amp;gt; 해당 오리진 레파지토리에 브랜치를 생성할 수 있는 액세스 권한이 있는 경우에는 fork 없이 브랜치 pull request가 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;2-pr&quot;&gt;2. PR&lt;/h1&gt;

&lt;p&gt;위의 사례에서 보듯, Pull Request는 쉽게 말해 내가 로컬에서 수정한 브랜치를 원본 레파지토리에 적용하고 싶으니 검토 후에 괜찮으면 적용해 달라 라는 것으로 정의할 수 있습니다.&lt;/p&gt;

&lt;p&gt;코드 충돌을 방지하고, 오픈소스 프로젝트에 기여할 때 많이 사용하는 방식이며 기업에서도 기업의 소스 코드를 관리하는 방식으로도 많이 사용하고 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PR 단계 도식화&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr2.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;내 원격 레파지토리에 Fork&lt;/li&gt;
  &lt;li&gt;로컬 레파지토리에 Clone&lt;/li&gt;
  &lt;li&gt;remote 설정&lt;/li&gt;
  &lt;li&gt;branch 생성&lt;/li&gt;
  &lt;li&gt;수정 작업 후, add, commit, push (원래 레파지토리에 수정사항이 있다면 fetch로 가져옴)&lt;/li&gt;
  &lt;li&gt;pull request 생성&lt;/li&gt;
  &lt;li&gt;승인되어 pr을 master 브랜치에 merge&lt;/li&gt;
  &lt;li&gt;merge 이후 동기화 및 브랜치 삭제&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;3-pr-실습&quot;&gt;3. PR 실습&lt;/h1&gt;

&lt;h2 id=&quot;31-특정-원본-저장소를-fork&quot;&gt;3.1. 특정 원본 저장소를 Fork&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr3.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr4.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;fork가 완료되면 내 저장소에 해당 레파지토리가 복사되며
이름 밑에 Fork From 으로 원래 저장소가 표기된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr5.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;32-fork-한-저장소를-로컬에-clone&quot;&gt;3.2. Fork 한 저장소를 로컬에 Clone&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr6.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;저장소 clone&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;url&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 저장소 복사&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr7.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;리모트 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote add &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;원본저장소 주소&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# remote에 원본 저장소 주소 설정&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 원격저장소 주소확인 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr8.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;32-브랜치-생성-후-작업하기&quot;&gt;3.2. 브랜치 생성 후 작업하기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;branch 생성하기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 브랜치 생성&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch dev-test

&lt;span class=&quot;c&quot;&gt;# 브랜치 이동&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout dev-test

&lt;span class=&quot;c&quot;&gt;# 브랜치 생성 후 이동&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; dev-test

&lt;span class=&quot;c&quot;&gt;# 브랜치 조회&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git bracnch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr9.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해당 브랜치에서 소스 작업&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr10.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;작업 후, commit &amp;amp; push&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# add&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# commit&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;msg&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# push&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin dev-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr11.png&quot; alt=&quot;이미지&quot; /&gt;
&lt;img src=&quot;/assets/img/Git/pr12.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;33-작업-후-pr-하기&quot;&gt;3.3. 작업 후, PR 하기.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;push가 완료 되면, 원격 저장소에서 PR 가능.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr13.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;상세 창에서 내용 및 메세지 등을 입력하고 PR 보냄.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr14.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;원본 저장소에서 관리자가 해당 PR을 보고 판단 및 승인 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr15.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해당 PR이 승인됨을 확인.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/Git/pr16.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PR merge 이후, 동기화 및 브랜치를 삭제하여 작업을 완료.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 원본저장소와 동기화&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git pull forkedRepo

&lt;span class=&quot;c&quot;&gt;# 브랜치 삭제&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$git&lt;/span&gt; branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; dev-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Donkyu Lim</name><email>eoen012@gmail.com</email></author><category term="Git" /><category term="git" /><category term="PR" /><category term="Pull Request" /><summary type="html"></summary></entry><entry><title type="html">Python - Discord 채널에 메세지 전달하기</title><link href="http://localhost:4000/python/discord-bot-message/" rel="alternate" type="text/html" title="Python - Discord 채널에 메세지 전달하기" /><published>2022-09-19T00:00:00+09:00</published><updated>2022-09-19T00:00:00+09:00</updated><id>http://localhost:4000/python/discord-bot-message</id><content type="html" xml:base="http://localhost:4000/python/discord-bot-message/">&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#discord-bot-으로-채널에-메세지-전달하기&quot; id=&quot;markdown-toc-discord-bot-으로-채널에-메세지-전달하기&quot;&gt;Discord Bot 으로 채널에 메세지 전달하기&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#개발-환경&quot; id=&quot;markdown-toc-개발-환경&quot;&gt;개발 환경&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#목적&quot; id=&quot;markdown-toc-목적&quot;&gt;목적&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#데이터베이스-사용&quot; id=&quot;markdown-toc-데이터베이스-사용&quot;&gt;데이터베이스 사용&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#디스코드-서버-내-웹-훅-생성&quot; id=&quot;markdown-toc-디스코드-서버-내-웹-훅-생성&quot;&gt;디스코드 서버 내 웹 훅 생성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#코드-작성&quot; id=&quot;markdown-toc-코드-작성&quot;&gt;코드 작성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#결론&quot; id=&quot;markdown-toc-결론&quot;&gt;결론&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;discord-bot-으로-채널에-메세지-전달하기&quot;&gt;Discord Bot 으로 채널에 메세지 전달하기&lt;/h1&gt;

&lt;h2 id=&quot;개발-환경&quot;&gt;개발 환경&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Mac OS Monterey (12.5)&lt;/li&gt;
  &lt;li&gt;Python 3.10.7&lt;/li&gt;
  &lt;li&gt;VS Code
    &lt;ul&gt;
      &lt;li&gt;Jupyter Notebook Extension 사용.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;목적&quot;&gt;목적&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;사용자와의 상호작용이 필요하지 않는 단순 메세지를 채널에 전달하는 봇을 생성한다.&lt;/li&gt;
  &lt;li&gt;웹 훅을 이용한 채널 메세지 전달 하는 방식을 설명한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;디스코드 내에서는 온/오프라인이 가능한 봇 외에 웹 훅을 이용하여 원하는 서버의 채널에 메세지를 전달하는 것이 가능하다.&lt;/p&gt;

&lt;p&gt;디스코드 봇 튜토리얼을 진행하던 중, 이런 방식이 있다는 것을 알게되어 공유하고자 한다.&lt;/p&gt;

&lt;h2 id=&quot;데이터베이스-사용&quot;&gt;데이터베이스 사용&lt;/h2&gt;

&lt;p&gt;현재 따로 설명하지는 않겠지만, 자료를 가져올 곳으로 ‘Notion’ 을 사용하였다. 노션에서는 메모 혹은 개인 저장용 문서 파일 작성 및 공유 등을 제공하는 사이트이며, 노션 사이트에서 작성하는 것 외 작성된 내용들을 API를 통해 데이터를 가져오는 기능또한 제공하고 있다.&lt;/p&gt;

&lt;p&gt;자세한 것은 &lt;a href=&quot;https://developers.notion.com/&quot;&gt;링크&lt;/a&gt; 를 참고하세요.&lt;/p&gt;

&lt;h2 id=&quot;디스코드-서버-내-웹-훅-생성&quot;&gt;디스코드 서버 내 웹 훅 생성&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;추가를 원하는 서버 내 설정으로 들어간다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord2/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202022-09-19%20%EC%98%A4%EC%A0%84%201.21.36.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;연동 탭으로 가서, 웹 후크 보기를 선택한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord2/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202022-09-19%20%EC%98%A4%EC%A0%84%201.22.13.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;새 웹 후크를 생성하여 이름 및 메세지 전달을 원하는 채널을 설정한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord2/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202022-09-19%20%EC%98%A4%EC%A0%84%201.22.31.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;웹 후크 URL을 복사하여 가지고 있는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;코드-작성&quot;&gt;코드 작성&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;이 &lt;a href=&quot;https://discord.com/developers/docs/resources/webhook&quot;&gt;링크&lt;/a&gt;를 참고하여, 웹 훅을 이용하여 메세지를 보내기 위한 포맷을 살펴본 후 포맷에 맞게 설정한다.&lt;/p&gt;

    &lt;p&gt;아래는 최대한 간단하게 작성한 메세지 예시이다.&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;채널에 보낼 메세지&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WebhookBot&quot;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WEB_HOOK_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# &amp;lt;Response [204]&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;해당 서버에서 메세지가 올바르게 전달되었는지 확인한다. (보통 위 코드에서 응답이 204로 온다면 성공함.)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord2/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202022-09-19%20%EC%98%A4%EC%A0%84%201.23.10.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;웹 훅을 이용하는 경우 생각 외로 간단하게 메세지를 채널에 전달 할 수 있다.&lt;/li&gt;
  &lt;li&gt;이 기능을 이용하는 경우, 외부 프로그램 및 서비스 등에서 이벤트가 있을 때 커뮤니티 디스코드로 메세지를 전달하는 방식을 갖는 부가 서비스를 구상할 수 있을 것으로 보인다.&lt;/li&gt;
  &lt;li&gt;봇을 따로 생성하여 코딩하는 것과 다르게 굳이 파이썬이 아니더라도 이용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;튜토리얼을 따라하면서 알게 된 방식으로 디스코드 커뮤니티를 운영하는 경우 간단하게 메시지를 전달 할 수 있는 방식으로 생각된다.&lt;/p&gt;

&lt;p&gt;해당 튜토리얼은 &lt;a href=&quot;https://www.youtube.com/watch?v=n8WzcnZYOIM&quot;&gt;여기&lt;/a&gt;를 참고하면 된다.&lt;/p&gt;

&lt;p&gt;현재 원하는 봇 서비스를 만들기 위해 계속 공부 중인데, 이런 쉬운 방법으로 채널에 메세지를 전달할 수 있는 방법을 알게되어 소개한다.&lt;/p&gt;</content><author><name>Donkyu Lim</name><email>eoen012@gmail.com</email></author><category term="Python" /><category term="Discord" /><category term="Python" /><summary type="html"></summary></entry><entry><title type="html">AWS Lambda - Lambda 내부에서 다른 람다 함수 호출하기</title><link href="http://localhost:4000/aws/aws-lambda-call/" rel="alternate" type="text/html" title="AWS Lambda - Lambda 내부에서 다른 람다 함수 호출하기" /><published>2022-09-13T00:00:00+09:00</published><updated>2022-09-13T00:00:00+09:00</updated><id>http://localhost:4000/aws/aws-lambda-call</id><content type="html" xml:base="http://localhost:4000/aws/aws-lambda-call/">&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#lambda-에서-다른-lambda-호출하기&quot; id=&quot;markdown-toc-lambda-에서-다른-lambda-호출하기&quot;&gt;Lambda 에서 다른 Lambda 호출하기&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-실행-권한-확인&quot; id=&quot;markdown-toc-1-실행-권한-확인&quot;&gt;1. 실행 권한 확인&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-에제-코드-작성-및-함수-등록&quot; id=&quot;markdown-toc-2-에제-코드-작성-및-함수-등록&quot;&gt;2. 에제 코드 작성 및 함수 등록&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-각-함수의-동작-테스트&quot; id=&quot;markdown-toc-3-각-함수의-동작-테스트&quot;&gt;3. 각 함수의 동작 테스트&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lambda-에서-다른-lambda-호출하기&quot;&gt;Lambda 에서 다른 Lambda 호출하기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;람다 함수 내부에서 또 다른 람다 함수를 호출한다.&lt;/li&gt;
  &lt;li&gt;‘boto3’ 라이브러리가 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-실행-권한-확인&quot;&gt;1. 실행 권한 확인&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Lambda 에서 구성 -&amp;gt; 권한으로 이동하여 권한을 클릭&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/AWS/0913-1.png&quot; alt=&quot;이미지1&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;권한 내 우측 권한 추가 버튼 클릭 후, 정책 연결 클릭.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/AWS/0913-2.png&quot; alt=&quot;이미지2&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;검색에서 ‘ AWSLambda_FullAccess ‘ 를 검색하여 찾기&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/AWS/0913-3.png&quot; alt=&quot;이미지3&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWSLambda_FullAccess 를 체크 후 정책 연결&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/AWS/0913-4.png&quot; alt=&quot;이미지4&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-에제-코드-작성-및-함수-등록&quot;&gt;2. 에제 코드 작성 및 함수 등록&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;test1 함수에서 test2 함수를 호출하는 예제&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;test1 람다 함수&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;boto3&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        
      &lt;span class=&quot;c1&quot;&gt;# service_name 에는 lambda
&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# region_name 에는 자신의 region
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;lan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;lambda&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ap-northeast-2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# FunctionName -&amp;gt; 호출하고자 하는 람다 함수명
&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# InvocationType -&amp;gt; 동기/비동기 호출 결정 -&amp;gt; Event : 비동기 호출
&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# Payload -&amp;gt; 전달할 파라미터
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;lan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FunctionName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InvocationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Event&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        
      &lt;span class=&quot;c1&quot;&gt;# TODO implement
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&apos;statusCode&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&apos;body&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Hello from Lambda!&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;test2 람다 함수&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;마찬가지로 권한 동일하게 부여해야 함.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# TODO implement
&lt;/span&gt;    
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;this is test2 lambda function !&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;event : &apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&apos;statusCode&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&apos;body&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Hello from Lambda!&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-각-함수의-동작-테스트&quot;&gt;3. 각 함수의 동작 테스트&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;test1 함수를 테스트&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;테스트는 적당히 json 형식 아무거나 지정하여 진행&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/AWS/0913-5.png&quot; alt=&quot;이미지5&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;테스트를 진행하면 result 탭에서 결과가 출력 됨. 200OK 이면 정상 동작한 것.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/AWS/0913-6.png&quot; alt=&quot;이미지6&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;test2 가 실제 호출되었는지 확인&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;test2 함수에서 모니터링 탭 &amp;gt; cloud watch 에서 보기 클릭.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/AWS/0913-7.png&quot; alt=&quot;이미지7&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;가장 최근 스트림을 클릭하여 로그 확인.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/AWS/0913-8.png&quot; alt=&quot;이미지8&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;실제 test2 함수에서 프린트한 문장이 찍힌 것을 확인하여 호출 됨을 확인한다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/AWS/0913-9.png&quot; alt=&quot;이미지9&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Donkyu Lim</name><email>eoen012@gmail.com</email></author><category term="AWS" /><category term="AWS" /><category term="Lambda" /><category term="Functions" /><summary type="html"></summary></entry><entry><title type="html">Python - Discord Bot 만들기</title><link href="http://localhost:4000/python/discord-bot/" rel="alternate" type="text/html" title="Python - Discord Bot 만들기" /><published>2022-09-11T00:00:00+09:00</published><updated>2022-09-11T00:00:00+09:00</updated><id>http://localhost:4000/python/discord-bot</id><content type="html" xml:base="http://localhost:4000/python/discord-bot/">&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#discord-bot-샘플-생성하기&quot; id=&quot;markdown-toc-discord-bot-샘플-생성하기&quot;&gt;Discord Bot 샘플 생성하기.&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#개발-환경&quot; id=&quot;markdown-toc-개발-환경&quot;&gt;개발 환경&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#discord-어플리케이션-생성&quot; id=&quot;markdown-toc-discord-어플리케이션-생성&quot;&gt;Discord 어플리케이션 생성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#discord-bot-에-연결하는-파이썬-코드-작성하기&quot; id=&quot;markdown-toc-discord-bot-에-연결하는-파이썬-코드-작성하기&quot;&gt;Discord Bot 에 연결하는 파이썬 코드 작성하기.&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#discord-python-library-설치&quot; id=&quot;markdown-toc-discord-python-library-설치&quot;&gt;Discord Python Library 설치.&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#샘플-소스-코드-작성&quot; id=&quot;markdown-toc-샘플-소스-코드-작성&quot;&gt;샘플 소스 코드 작성&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#마치며&quot; id=&quot;markdown-toc-마치며&quot;&gt;마치며&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;discord-bot-샘플-생성하기&quot;&gt;Discord Bot 샘플 생성하기.&lt;/h1&gt;

&lt;h2 id=&quot;개발-환경&quot;&gt;개발 환경&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Mac OS Monterey (12.5)&lt;/li&gt;
  &lt;li&gt;Python 3.10.7&lt;/li&gt;
  &lt;li&gt;VS Code&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;discord-어플리케이션-생성&quot;&gt;Discord 어플리케이션 생성&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Discord Developers 접속 (https://discord.com/developers/applications)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/1.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New Application 을 클릭하여 이름을 입력 후, 새 어플리케이션 생성&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/2.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bot 영역을 클릭 후, ‘Add Bot’ 을 클릭 후, ‘Yes, Do it!’ 을 클릭하여 봇을 생성.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/3.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;INTENT 와 Permission 을 ‘Administrator’ 로 활성화&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;추후 목적에 따라 비활성화/활성화 조정 가능.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;현재는 테스트 목적으로 활성화&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/4.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/5.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;OAuth2 탭으로 이동하여, 아래와 같이 변경&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;서버에 봇을 추가할 때 요구하는 권한 등을 설정하는 과정.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/6.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;OAuth2 &amp;gt; URL Generator 로 이동하여, 아래와 같이 세팅하면 맨 아래에 URL 하나를 리턴해준다. 해당 URL을 복사하여 가지고 있는다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/7.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/8.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;해당 URL을 웹 브라우저에서 복사하여 접속하면 아래와 같이 디스코드 봇 추가 승인 화면이 나온다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/9.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;여기서 추가하고자 하는 서버 (테스트 용으로 서버를 하나 만들어 두는 것을 추천)를 선택 후, 계속하기를 클릭한다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/10.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;그럼 여기서, URL 생성 시 체크했던 권한을 요구하게 되고 다음 단계로 진행하여 서버에 봇을 추가한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그러면 아래 사진처럼 서버에 추가된 봇을 확인할 수 있다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/11.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;discord-bot-에-연결하는-파이썬-코드-작성하기&quot;&gt;Discord Bot 에 연결하는 파이썬 코드 작성하기.&lt;/h2&gt;

&lt;h3 id=&quot;discord-python-library-설치&quot;&gt;Discord Python Library 설치.&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; discord.py &lt;span class=&quot;c&quot;&gt;# 디스코드 패키지&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; python-dotenv &lt;span class=&quot;c&quot;&gt;# env 파일로 환경 변수 세팅하기 위해 설치.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;discord.py 는 디스코드에서 제공하는 라이브러리이다. 이를 이용하여 디스코드 봇과 연결 및 다양한 기능을 사용한다.&lt;/li&gt;
  &lt;li&gt;python-dotenv 는 env 파일을 이용하여 토큰 값 혹은 민감 정보들을 포함시키기 위해 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;샘플-소스-코드-작성&quot;&gt;샘플 소스 코드 작성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;방금 생성한 봇과 연결하기 위한 샘플 코드를 작성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;어플리케이션 봇 탭에서 토큰을 생성 및 복사한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/12.png&quot; alt=&quot;이미지&quot; /&gt;
 &lt;img src=&quot;/assets/img/Python/discord1/13.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;작업 경로 내에 ‘.env’ 파일을 생성 후, 값을 복사해놓는다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/14.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;‘bot.py’ 라는 파일을 생성 후 아래 소스 코드를 사용한다.&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;# bot.py
&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

 &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;discord&lt;/span&gt;
 &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dotenv&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_dotenv&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;load_dotenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;TOKEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;DISCORD_TOKEN&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;intents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;intents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; has connected to Discord!&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;이후, 터미널에서 파이썬 명령을 통해 실행&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 bot.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;간혹 가다 아래의 문제가 발생하는 경우가 존재.&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Cannot connect to host discord.com:443 ssl:True &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;SSLCertVerificationError: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, &lt;span class=&quot;s1&quot;&gt;&apos;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;이는 디스코드 https 통신 내 인증 관련 문제로 아래 방법을 통해 해결함.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;파이썬 설치 폴더의 ‘install Certificates.command’ 실행.&lt;/li&gt;
      &lt;li&gt;폴더가 없는 경우, 파이썬 공식 홈페이지에서 새로 설치하여 진행.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;참고 - &lt;a href=&quot;https://stackoverflow.com/questions/62108183/discord-py-bot-dont-have-certificate&quot;&gt;문제관련링크&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;터미널 실행 시, 정상적이라면 아래와 같이 동작함.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/15.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;위와 같이, 메세지가 뜨게 되었을 때 디스코드 서버에서 해당 봇을 살펴보면
 온라인으로 변경된 것을 볼 수 있음.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/Python/discord1/16.png&quot; alt=&quot;이미지&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;해당 포스트에서는 다음을 알아보았다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;디스코드 봇을 생성 및 권한 부여 - 서버 권한 부여&lt;/li&gt;
  &lt;li&gt;파이썬 코드를 통해 디스코드 봇과 연결&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;기본적으로 디스코드 라이브러리가 잘 구성되어있어
공식 홈페이지 가이드 및 도큐먼트를 통해 원하는 기능들을 구성하여
봇을 만들 수 있다.&lt;/p&gt;

&lt;p&gt;또한, 기본적으로 OAuth2가 구성되어 있고 봇과의 통신또한 https 기반
웹 소켓 통신이기 때문에 왠만한 기능들을 다 구현가능하다고 본다.&lt;/p&gt;

&lt;p&gt;기본적으로 전적 검색 봇이나 유튜브 노래 검색 봇 등, 많은 사례가 있으니
하나를 잡아서 시도해보는 것도 나쁘지 않다.&lt;/p&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://realpython.com/how-to-make-a-discord-bot-python/#creating-an-application&lt;/li&gt;
  &lt;li&gt;https://discordpy.readthedocs.io/en/stable/quickstart.html&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Donkyu Lim</name><email>eoen012@gmail.com</email></author><category term="Python" /><category term="Discord" /><category term="Python" /><summary type="html"></summary></entry><entry><title type="html">MyBatis Camel Case Configure</title><link href="http://localhost:4000/spring/Mybatis-camelcase-usage/" rel="alternate" type="text/html" title="MyBatis Camel Case Configure" /><published>2022-08-30T00:00:00+09:00</published><updated>2022-08-30T00:00:00+09:00</updated><id>http://localhost:4000/spring/Mybatis-camelcase-usage</id><content type="html" xml:base="http://localhost:4000/spring/Mybatis-camelcase-usage/">&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#mybatis의-camelcase-옵션&quot; id=&quot;markdown-toc-mybatis의-camelcase-옵션&quot;&gt;MyBatis의 CamelCase 옵션.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mybatis에서-해당-옵션-작성하기&quot; id=&quot;markdown-toc-mybatis에서-해당-옵션-작성하기&quot;&gt;MyBatis에서 해당 옵션 작성하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#해당-옵션-사용-시-주의할-점&quot; id=&quot;markdown-toc-해당-옵션-사용-시-주의할-점&quot;&gt;해당 옵션 사용 시, 주의할 점!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mybatis의-camelcase-옵션&quot;&gt;MyBatis의 CamelCase 옵션.&lt;/h2&gt;

&lt;p&gt;마이바티스에서 DB 쿼리 질의 시 가져오는 항목명에 대해 카멜 케이스를 적용하는 옵션이다.&lt;/p&gt;

&lt;p&gt;쉽게 말해 아래와 같은 쿼리를 작성하게 되면&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT USER_ID FROM USER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;옵션이 적용되어있지 않으면 아래와 같이 나오게 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;USER_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 옵션을 적용하게 되면 이렇게 변한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;더 편하게 사용하기 위한 옵션으로 보면 된다.&lt;/p&gt;

&lt;h2 id=&quot;mybatis에서-해당-옵션-작성하기&quot;&gt;MyBatis에서 해당 옵션 작성하기&lt;/h2&gt;

&lt;p&gt;카멜 케이스를 적용하기 위해 아래의 방법 중 1가지를 택하여 작성한다.&lt;/p&gt;

&lt;p&gt;xml 방식에서는 mapUnderscoreToCamelCase 라는 명칭을 사용하고&lt;/p&gt;

&lt;p&gt;yml 방식에서는 map-underscore-to-camel-case 명칭을 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;config.xml 작성하기.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;setting&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mapUnderscoreToCamelCase&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;typeAliases&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/typeAliases&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;application.yml 사용하기.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;mybatis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mapper-locations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mybatis/**/*.xml&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;map-underscore-to-camel-case&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type-aliases-package&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;옵션과 관련하여 더 많은 정보를 알고 싶다면 아래의 링크를 추천한다.&lt;/p&gt;

&lt;p&gt;공식 사이트이며, 옵셔닝 관련 정보를 조회할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mybatis.org/mybatis-3/ko/configuration.html&quot;&gt;mybatis.org&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;해당-옵션-사용-시-주의할-점&quot;&gt;해당 옵션 사용 시, 주의할 점!&lt;/h2&gt;

&lt;p&gt;해당 옵션은 자바 빈 스펙이 적용되는 result Type 을 사용할 떄만 적요이 가능하다.&lt;/p&gt;

&lt;p&gt;즉, 쿼리에 다음과 같이 작성하였을 경우 옵션이 적용되지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parameterType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HashMap&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resultType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HashMap&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    select * from user
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이유는, HashMap은 JavaBeans 의 스펙이 아니기 때문이다.&lt;/p&gt;

&lt;p&gt;따라서, 해당 옵션을 사용하고자 할 때는 JavaBeans 스펙에 해당하는&lt;/p&gt;

&lt;p&gt;resultType객체를 사용하여야 한다.&lt;/p&gt;</content><author><name>Donkyu Lim</name><email>eoen012@gmail.com</email></author><category term="Spring" /><category term="Spring" /><category term="SpringBoot" /><category term="AOP" /><summary type="html"></summary></entry><entry><title type="html">Spring/SpringBoot AOP 클래스 사용하기</title><link href="http://localhost:4000/spring/aop-regist/" rel="alternate" type="text/html" title="Spring/SpringBoot AOP 클래스 사용하기" /><published>2022-08-26T00:00:00+09:00</published><updated>2022-08-26T00:00:00+09:00</updated><id>http://localhost:4000/spring/aop-regist</id><content type="html" xml:base="http://localhost:4000/spring/aop-regist/">&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-aop&quot; id=&quot;markdown-toc-spring-aop&quot;&gt;Spring AOP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#xml스키마-방식&quot; id=&quot;markdown-toc-xml스키마-방식&quot;&gt;XML(스키마) 방식&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#aspectj-어노테이션-방식&quot; id=&quot;markdown-toc-aspectj-어노테이션-방식&quot;&gt;@AspectJ 어노테이션 방식&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#autoproxying-활성화&quot; id=&quot;markdown-toc-autoproxying-활성화&quot;&gt;AutoProxying 활성화&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#마치며&quot; id=&quot;markdown-toc-마치며&quot;&gt;마치며&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스프링과 스프링 부트에서는 AspectJ를 통한 AOP 등록방법이 상이하다.&lt;/p&gt;

&lt;p&gt;따라서, 여기서는 기본적은 AOP 어드바이저를 등록하기 위해 어떤 설정을 해야하는지 살펴 볼 것이다.&lt;/p&gt;

&lt;h2 id=&quot;spring-aop&quot;&gt;Spring AOP&lt;/h2&gt;

&lt;p&gt;등록 방식은 크게 2가지로 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XML( 스키마 기반 방식 )&lt;/li&gt;
  &lt;li&gt;@AspectJ ( 어노테이션 기반 방식)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xml스키마-방식&quot;&gt;XML(스키마) 방식&lt;/h2&gt;

&lt;p&gt;제일 먼저 aspect 를 작성한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예제 소스 : 실행 시간을 계산하는 AOP 클래스&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RunningTimeAspect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;DecimalFormat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DecimalFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#.###&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;- Finish Method Name : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; ◀&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;- Time Record Chk    : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 초 ◀&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;XML로 Aspect를 정의하기 위해서는 스프링이 제공하는 aop 태그를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;context 관련 XML에 아래의 요소들을 정의한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;xml 빈 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;xmlns:tx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;xmlns:aop=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;추가됨.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
http://www.springframework.org/schema/aop &amp;lt;- 추가됨.
http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;추가됨.&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;aop config 등록&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 해당 클래스를 빈으로 등록 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aspectName&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.aspect&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- aop 설정 시작 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- aspect name 지정 --&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:aspect&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aspectName&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 해당 aspect 의 pointcut (실행기준) 지정 --&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pointcutName&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;expression=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(* com.example..*Service.*(..))&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 해당 aspect 의 정책 지정 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 메소드는 지정한 클래스의 메소드 명을 작성한다 --&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:around&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;methodName&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pointcut-ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pointcutName&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;aspectj-어노테이션-방식&quot;&gt;@AspectJ 어노테이션 방식&lt;/h2&gt;

&lt;p&gt;Spring AOP의 Runtime-weaving 으로 동작하는 방식.&lt;/p&gt;

&lt;p&gt;자동 프록싱 설정이 필요한데, 여기서 AutoProxying이란&lt;/p&gt;

&lt;p&gt;Spring이 bean에 대해서 Aspect에 의해 advice를 받는지 판단하고 Proxy Object를 생성해주는 개념이다&lt;/p&gt;

&lt;h3 id=&quot;autoproxying-활성화&quot;&gt;AutoProxying 활성화&lt;/h3&gt;

&lt;p&gt;Spring AOP에선 두 가지 방법을 통해 autoproxying 설정할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. &amp;lt;aop:aspectj-autoproxy /&amp;gt;
2. @Configuration, @EnableAspectJAutoProxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;XML에서 &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt; 태그를 작성하는 방법과 순수 Java 코드로 autoproxying 환경을 설정하는 방법이 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableAspectJAutoProxy&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Import&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RunningTimeAspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* bean import */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AspectJAutoProxyConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RunningTimeAspect&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RunningTimeAspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring Boot에선 자체적으로 autoproxying 설정이 내장되어 있어&lt;/p&gt;

&lt;p&gt;@Aspect와 함께 @Component를 설정하여 Aspect를 자체적으로 bean으로 등록하여 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예제 소스&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Aspect 사용하겠다는 의미 */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 컴포넌트 어노테이션을 통해 빈 등록 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RunningTimeAspect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 포인트 컷 생성, 여기서는 com.exam.service 패키지 내 메소드에 대해 실행하겠다는 의미 */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(* com.exam.service..*.*(..))&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Around 정책으로 포인트컷에 대해 지정 */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cut()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* ProceedingJoinPoint를 받아, 메소드 실행 후 다시 아래 finally 구문으로 복귀 */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;DecimalFormat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DecimalFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#.##&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;▶ Finish Method Name : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; ◀&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;▶ Time Record Chk    : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 초 ◀&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;아무래도 스키마 방식 보다는 어노테이션을 통한 관리가 좀 더 쉽게 느껴진다.&lt;/p&gt;

&lt;p&gt;스키마 방식의 경우, 소스와 별개로 관리포인트가 한 곳 더 생기게 되어 불편하다.&lt;/p&gt;

&lt;p&gt;어노테이션을 통한 방식이 좀 더 직관적이고 관리상 편리하다는 생각이 든다.&lt;/p&gt;</content><author><name>Donkyu Lim</name><email>eoen012@gmail.com</email></author><category term="Spring" /><category term="Spring" /><category term="SpringBoot" /><category term="AOP" /><summary type="html"></summary></entry><entry><title type="html">Spring AOP Joinpoint 와 ProceedingJoinPoint</title><link href="http://localhost:4000/spring/join-point/" rel="alternate" type="text/html" title="Spring AOP Joinpoint 와 ProceedingJoinPoint" /><published>2022-08-26T00:00:00+09:00</published><updated>2022-08-26T00:00:00+09:00</updated><id>http://localhost:4000/spring/join-point</id><content type="html" xml:base="http://localhost:4000/spring/join-point/">&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#joinpoint&quot; id=&quot;markdown-toc-joinpoint&quot;&gt;Joinpoint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-for-springboot&quot; id=&quot;markdown-toc-example-for-springboot&quot;&gt;Example For SpringBoot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#proceedingjoinpoint&quot; id=&quot;markdown-toc-proceedingjoinpoint&quot;&gt;ProceedingJoinPoint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-for-springboot-1&quot; id=&quot;markdown-toc-example-for-springboot-1&quot;&gt;Example For SpringBoot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;joinpoint&quot;&gt;Joinpoint&lt;/h2&gt;

&lt;p&gt;joinpoint는 메서드 매개변수, 리턴 값, throw 된 예외 같은 조인 지점에서 사용할 수 있는 상태에 대한 액세스를 제공하는
AspectJ 인터페이스 이다.&lt;/p&gt;

&lt;p&gt;또한, 해당 메서드에 대한 정적 정보를 제공한다.&lt;/p&gt;

&lt;p&gt;아래의 Pointcut 과 함께 사용이 가능하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@Around : 메소드 실행 전/후에 실행.&lt;/li&gt;
  &lt;li&gt;@Before : 메소드 실행 전 실행.&lt;/li&gt;
  &lt;li&gt;@After : 메소드 실행 후 실행.&lt;/li&gt;
  &lt;li&gt;@AfterThrowing : 메소드가 “정상” 실행 후, 실행.&lt;/li&gt;
  &lt;li&gt;@AfterReturning : 메소드가 “예외” 발생 후, 실행.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example-for-springboot&quot;&gt;Example For SpringBoot&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;aop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// service 패키지 내 모든 메소드에 대한 포인트 컷 생성.&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..*(..)))&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;servicePointCut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 포인트 컷에 대해 메소드 실행 전 수행할 내용.&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;servicePointCut()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;beforeAdvice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MethodSignature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MethodSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 실행할 메소드 명 가져오기&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;proceedingjoinpoint&quot;&gt;ProceedingJoinPoint&lt;/h2&gt;

&lt;p&gt;JoinPoint의 확장으로, proceed() 라는 메소드를 추가 사용할 수 있습니다.
해당 메소드가 실행되게 되면, 다음 어드바이스 혹은 대상 메소드를 실행합니다.&lt;/p&gt;

&lt;p&gt;코드의 흐름을 제어하고, 추가 호출을 진행할 지 여부를 결정할 수 있는 권한을 제공합니다.
@Around 를 사용할 때 사용 가능합니다.&lt;/p&gt;

&lt;h2 id=&quot;example-for-springboot-1&quot;&gt;Example For SpringBoot&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RunningTimeAspect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 서비스 패키지 내 메소드를 대상으로 함.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(* com.exam.service..*.*(..))&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 메소드 수행 시간을 계산하여 로깅.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cut()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// proceed() 하게 되면, 대상 메소드를 실행.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 그리고 finally 부분으로 복귀함.&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;DecimalFormat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DecimalFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#.##&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;▶ Finish Method Name : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; ◀&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;▶ Time Record Chk    : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 초 ◀&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예시는 메소드 수행 시간을 계산하는 부분으로 사용되었으나 그 외에 에러 발생시 재시도 등과 같은 방법을
응용하여 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/aspectj-joinpoint-proceedingjoinpoint&quot;&gt;참고 사이트&lt;/a&gt;&lt;/p&gt;</content><author><name>Donkyu Lim</name><email>eoen012@gmail.com</email></author><category term="Spring" /><category term="Spring" /><category term="SpringBoot" /><category term="AOP" /><summary type="html"></summary></entry><entry><title type="html">AWS Lambda - Dynamo DB / Postgre Access</title><link href="http://localhost:4000/aws/aws-lambda-dynamo/" rel="alternate" type="text/html" title="AWS Lambda - Dynamo DB / Postgre Access" /><published>2022-08-23T00:00:00+09:00</published><updated>2022-08-23T00:00:00+09:00</updated><id>http://localhost:4000/aws/aws-lambda-dynamo</id><content type="html" xml:base="http://localhost:4000/aws/aws-lambda-dynamo/">&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#람다에서-다이나모-또는-postgre-액세스&quot; id=&quot;markdown-toc-람다에서-다이나모-또는-postgre-액세스&quot;&gt;람다에서 다이나모 또는 Postgre 액세스&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#예제-코드&quot; id=&quot;markdown-toc-예제-코드&quot;&gt;예제 코드&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;람다에서-다이나모-또는-postgre-액세스&quot;&gt;람다에서 다이나모 또는 Postgre 액세스&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;람다에서 Postgre DB 작업 하기&lt;/p&gt;

    &lt;p&gt;람다에서 Postgre DB 작업을 하기 위해서는 &lt;a href=&quot;https://pypi.org/project/psycopg2/&quot;&gt;psycopg2&lt;/a&gt; 라이브러리가 필요하다.&lt;/p&gt;

    &lt;p&gt;해당 라이브러리를 사용하여 연결 및 결과를 가져와 작업한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다이나모에 액세스 하기&lt;/p&gt;

    &lt;p&gt;람다에서 다이나모에 액세스 하기 위해서는 파이썬으로 작성된 다이나모 객체 가져오는 함수를 작성해야 한다.&lt;/p&gt;

    &lt;p&gt;아래는 예시이고, 공식 문서에 해당 설명이 더 자세히 나와있다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/example_dynamodb_CreateTable_section.html&quot;&gt;다이나모 코드 샘플&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/GettingStartedDynamoDB.html&quot;&gt;다이나모 공식 문서&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html&quot;&gt;boto3&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;예제-코드&quot;&gt;예제 코드&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;boto3&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;boto3.dynamodb.types&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeDeserializer&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;botocore.vendored&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 1. RDB 연결 후 결과 가져오기
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 람다의 옵션 값으로 연결 정보 가져옴.
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;db_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;db_user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db_pass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;db_pass&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db_host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;db_host&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5432&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;#connection
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dbname=&apos;%s&apos; user=&apos;%s&apos; host=&apos;%s&apos; password=&apos;%s&apos;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;#parameter
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;userSeq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;#query execute
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select * from user where user_seq != &apos;%s&apos;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userSeq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# select one row
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# result = cursor.fetchAll() # select all row
&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# process
&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 2. Dynamo Access
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;dyClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;dynamodb&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queryPgr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dyClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_paginator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;query&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sdclient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;servicediscovery&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;isRecord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;page_iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryPgr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paginate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;dynamo_table_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# table name
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;IndexName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;index_name&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# index name (if use)
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;KeyConditionExpression&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;#keyAttribute = :v1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# condition
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;ExpressionAttributeValues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
                &lt;span class=&quot;s&quot;&gt;&apos;:v1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;N&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# value for condition
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ExpressionAttributeNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&apos;#keyAttribute&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;seq&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# column name
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ScanIndexForward&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Items&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;###### dynamodb.query Total Itmes Count&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos; #####&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Donkyu Lim</name><email>eoen012@gmail.com</email></author><category term="AWS" /><category term="AWS" /><category term="Lambda" /><category term="DynamoDB" /><category term="Postgre" /><summary type="html"></summary></entry><entry><title type="html">DynamoDB - Attribute name is a reserved keyword</title><link href="http://localhost:4000/error/dynamodb-error/" rel="alternate" type="text/html" title="DynamoDB - Attribute name is a reserved keyword" /><published>2022-08-10T00:00:00+09:00</published><updated>2022-08-10T00:00:00+09:00</updated><id>http://localhost:4000/error/dynamodb-error</id><content type="html" xml:base="http://localhost:4000/error/dynamodb-error/">&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#원인&quot; id=&quot;markdown-toc-원인&quot;&gt;원인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#해결방법&quot; id=&quot;markdown-toc-해결방법&quot;&gt;해결방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DynamoDB Java SDK 를 사용하여 Table 스캔 도중 해당 에러가 발생하였다.&lt;/p&gt;

&lt;h2 id=&quot;원인&quot;&gt;원인&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Dynamo Scan/GetItem 등 쿼리 및 표현식 등에서 사용된 명칭(항목명 등)이 DynamoDB 예약어와 충돌하여 발생하는 문제.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;에러 발생 했던 구문&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nc&quot;&gt;ItemCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ScanOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;join_date &amp;gt;= :from and join_date &amp;lt;= :to&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user_id, user_name, join_date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expressionAttributeValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;필터 변수인 :from :to 가 예약어와 겹쳐 발생한 문제.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;해결방법&quot;&gt;해결방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;아래 링크의 예약어를 참고하여 최대한 겹치치 않게 작성한다.&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/ReservedWords.html&quot;&gt;DynamoDB의 예약어&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;expressionAttributeValues를 사용하여 예약어를 사용할 수도 있는데 &lt;br /&gt; 위 처럼 scan 구문에 예약어가 들어가는 경우에도 해당 에러가 발생하는 것으로 보인다. &lt;br /&gt;
아래 링크에서 표현식에 대해 확인이 가능하다.&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/Expressions.ExpressionAttributeNames.html&quot;&gt;표현식 속성 이름 대체하기&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Donkyu Lim</name><email>eoen012@gmail.com</email></author><category term="Error" /><category term="AWS" /><category term="DynamoDB" /><summary type="html"></summary></entry><entry><title type="html">CentOS7 - rc.local 활성화 하기</title><link href="http://localhost:4000/server/rclocal/" rel="alternate" type="text/html" title="CentOS7 - rc.local 활성화 하기" /><published>2022-08-03T00:00:00+09:00</published><updated>2022-08-03T00:00:00+09:00</updated><id>http://localhost:4000/server/rclocal</id><content type="html" xml:base="http://localhost:4000/server/rclocal/">&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-파일의-실행-권한-부여&quot; id=&quot;markdown-toc-1-파일의-실행-권한-부여&quot;&gt;1. 파일의 실행 권한 부여&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-현재-상태-확인&quot; id=&quot;markdown-toc-2-현재-상태-확인&quot;&gt;2. 현재 상태 확인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-활성화&quot; id=&quot;markdown-toc-3-활성화&quot;&gt;3. 활성화&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-reboot시-사용가능하게-enable-설정&quot; id=&quot;markdown-toc-4-reboot시-사용가능하게-enable-설정&quot;&gt;4. reboot시 사용가능하게 enable 설정&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-서비스-상태-확인&quot; id=&quot;markdown-toc-5-서비스-상태-확인&quot;&gt;5. 서비스 상태 확인&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rc.local 이란?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;부팅시 자동실행 명령어 스크립트 수행하며 일반적으로 서버 부팅시마다 매번 자동 실행되길 원하는 명령어를 넣어주는 곳.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CentOS7 에서는 /etc/rc.local 에 명령어를 입력해도 재부팅시 실행이 안됩니다.default 상태가 disable 상태로 되어있습니다./etc/rc.local 파일을 보면 아래와 같이 /etc/rc.d/rc.local에 실행권한을 부여해줘야 한다고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;# Please note that you must run &apos;chmod +x /etc/rc.d/rc.local&apos; to ensurethat this script will be executed during boot.&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-파일의-실행-권한-부여&quot;&gt;1. 파일의 실행 권한 부여&lt;/h2&gt;

&lt;p&gt;위에서 확인한대로 /etc/rc.d/rc.local 파일에 실행권한을 부여해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /etc/rc.d/rc.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-현재-상태-확인&quot;&gt;2. 현재 상태 확인&lt;/h2&gt;

&lt;p&gt;아래 명령어로 확인해보면 rc-local 의 서비스 상태가Active: inactive (dead) 로 확인이 되는걸 보실 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl status rc-local.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-활성화&quot;&gt;3. 활성화&lt;/h2&gt;

&lt;p&gt;아래 명령어로 Active 상태로 활성화 해줍니다.현재 상태에서 활성화 해주는 것이기 때문에 재부팅해도 유지하려면 4번의 설정을 추가해주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl start rc-local.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4-reboot시-사용가능하게-enable-설정&quot;&gt;4. reboot시 사용가능하게 enable 설정&lt;/h2&gt;

&lt;p&gt;재부팅하게되면 다시 disable 상태로 변경되기 때문에 재부팅 후에도 enable 상태를 유지하기 위해/usr/lib/systemd/system/rc-local.service 파일을 수정 후 아래의 명령어를 입력해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi /usr/lib/systemd/system/rc-local.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하단에 아래 내용을 추가해 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install] &lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;부팅시 서비스를 자동실행하게 enable 해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;rc-local.service Created symlink from /etc/systemd/system/multi-user.target.wants/rc-local.service to /usr/lib/systemd/system/rc-local.service.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-서비스-상태-확인&quot;&gt;5. 서비스 상태 확인&lt;/h2&gt;

&lt;p&gt;서비스가 enable 상태인지 확인합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl list-unit-files |grep rc.local rc-local.service enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;춣처 : https://blessu1201.github.io/2020/09/19/rclocal.html&lt;/p&gt;</content><author><name>Donkyu Lim</name><email>eoen012@gmail.com</email></author><category term="Server" /><category term="centos" /><category term="rclocal" /><summary type="html"></summary></entry></feed>